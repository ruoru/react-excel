{"version":3,"sources":["components/ReactExcel/index.js","App.js","serviceWorker.js","index.js"],"names":["ReactExcel","Component","props","_this2","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onLeftHeaderScroll","cellHeight","scrollTop","tableLeftHeaderTbody","rightBottomWrapper","rightTopHeader","style","height","concat","marginTop","tableLeftHeaderThead","onTopHeaderScroll","minCellWidth","scrollLeft","leftWrapper","width","onInnerTableScroll","_this2$props","_this2$rightBottomWra","renderCells","rows","columns","data","_this2$props2","range","map","rowIndex","react_default","a","createElement","key","columnIndex","minWidth","state","_this3","_this$props","pageSize","_this$state","className","ref","dom","cellSpacing","data-col","data-row","onContextMenu","e","preventDefault","onScroll","item","onMouseDown","onMouseOver","onMouseUp","String","fromCharCode","Math","floor","tableContent","onDoubleClick","showInput","_getRowsAndColumns","Array","isArray","length","getRowsAndColumns","defaultProps","onDataChange","console","log","App","src_components_ReactExcel","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7f7b8f18.chunk.js","sourcesContent":["import \"./index.css\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { range } from \"lodash\";\n\nclass TableCell extends Component {\n  render() {\n    return (\n      <input\n        type=\"text\"\n        className=\"cell-input\"\n        style={{ zIndex: this.state.isTyping ? 100 : -100 }}\n        ref={dom => {\n          this.cellInput = dom;\n        }}\n        // value={this.state.inputValue}\n        // onChange={this.onChangeInputValue}\n        // onKeyPress={this.onInputKeyPress}\n        // onKeyDown={this.onInputKeyDown}\n        onDoubleClick={e => e.stopPropagation()}\n        onMouseDown={e => e.stopPropagation()}\n        onMouseOver={e => e.stopPropagation()}\n        onMouseUp={e => e.stopPropagation()}\n        onMouseLeave={e => e.stopPropagation()}\n        // onCopy={this.onCopy}\n        // onCut={this.onCut}\n        // onPaste={this.onPaste}\n      />\n    );\n  }\n}\n\nclass TableWrap extends Component {}\n\nclass ReactExcel extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      data: [],\n      rows: 0,\n      columns: 0\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    const { rows, columns } = getRowsAndColumns(props.data);\n    return {\n      data: props.data,\n      rows,\n      columns\n    };\n\n    function getRowsAndColumns(data) {\n      let rows = 100,\n        columns = 30;\n      if (Array.isArray(data)) {\n        rows += data.length;\n        if (Array.isArray(data[0])) {\n          columns += data[0].length;\n        }\n      }\n\n      return { rows, columns };\n    }\n  }\n\n  onLeftHeaderScroll = () => {\n    const { cellHeight } = this.props;\n    const { scrollTop } = this.tableLeftHeaderTbody;\n    if (this.scrollTop !== scrollTop) {\n      this.scrollTop = scrollTop;\n      this.rightBottomWrapper.scrollTop = scrollTop;\n      if (scrollTop > 0) {\n        this.rightTopHeader.style.height = `${cellHeight + 1}px`;\n        this.rightBottomWrapper.style.marginTop = \"-1px\";\n        this.tableLeftHeaderThead.style.height = `${cellHeight + 1}px`;\n      } else {\n        this.rightTopHeader.style.height = `${cellHeight}px`;\n        this.rightBottomWrapper.style.marginTop = 0;\n        this.tableLeftHeaderThead.style.height = `${cellHeight}px`;\n      }\n    }\n  };\n\n  onTopHeaderScroll = () => {\n    const { minCellWidth } = this.props;\n    const { scrollLeft } = this.rightTopHeader;\n    if (this.scrollLeft !== scrollLeft) {\n      this.scrollLeft = scrollLeft;\n      this.rightBottomWrapper.scrollLeft = scrollLeft;\n      if (scrollLeft > 0) {\n        this.leftWrapper.style.width = `${minCellWidth + 1}px`;\n      } else {\n        this.leftWrapper.style.width = `${minCellWidth}px`;\n      }\n    }\n  };\n\n  onInnerTableScroll = () => {\n    const { minCellWidth, cellHeight } = this.props;\n    const { scrollTop, scrollLeft } = this.rightBottomWrapper;\n    if (this.scrollTop !== scrollTop) {\n      this.scrollTop = scrollTop;\n      this.tableLeftHeaderTbody.scrollTop = scrollTop;\n      if (scrollTop > 0) {\n        this.rightTopHeader.style.height = `${cellHeight + 1}px`;\n        this.rightBottomWrapper.style.marginTop = \"-1px\";\n        this.tableLeftHeaderThead.style.height = `${cellHeight + 1}px`;\n      } else {\n        this.rightTopHeader.style.height = `${cellHeight}px`;\n        this.rightBottomWrapper.style.marginTop = 0;\n        this.tableLeftHeaderThead.style.height = `${cellHeight}px`;\n      }\n    }\n\n    if (this.scrollLeft !== scrollLeft) {\n      this.scrollLeft = scrollLeft;\n      this.rightTopHeader.scrollLeft = scrollLeft;\n      if (scrollLeft > 0) {\n        this.leftWrapper.style.width = `${minCellWidth + 1}px`;\n      } else {\n        this.leftWrapper.style.width = `${minCellWidth}px`;\n      }\n    }\n  };\n\n  renderCells = (rows, columns, data) => {\n    const { cellHeight, minCellWidth } = this.props;\n    return range(0, rows - 1).map(rowIndex => (\n      <tr key={rowIndex}>\n        {range(0, columns - 1).map(columnIndex => (\n          <td\n            key={columnIndex}\n            style={{\n              height: `${cellHeight}px`,\n              minWidth: `${minCellWidth}px`\n            }}\n          >\n            {(data[rowIndex] && data[rowIndex][columnIndex]) || \"\"}\n          </td>\n        ))}\n      </tr>\n    ));\n  };\n\n  render() {\n    const { cellHeight, minCellWidth, pageSize } = this.props;\n    const { data, rows, columns } = this.state;\n    return (\n      <div className=\"react-excel\">\n        <div\n          className=\"left-wrapper\"\n          ref={dom => {\n            this.leftWrapper = dom;\n          }}\n        >\n          <table className=\"table-left-header\" cellSpacing=\"0\">\n            <thead\n              ref={dom => {\n                this.tableLeftHeaderThead = dom;\n              }}\n            >\n              <th\n                data-col={-1}\n                data-row={-1}\n                // onClick={this.switchColRow}\n                onContextMenu={e => e.preventDefault()}\n              />\n            </thead>\n            <tbody\n              style={{\n                marginTop: `${cellHeight}px`,\n                height: `${pageSize * cellHeight}px`\n              }}\n              // onContextMenu={this.onContextMenu}\n              // onMouseDown={this.onMouseDown}\n              // onMouseOver={this.onMouseOver}\n              // onMouseUp={this.onMouseUp}\n              ref={dom => {\n                this.tableLeftHeaderTbody = dom;\n              }}\n              onScroll={this.onLeftHeaderScroll}\n            >\n              {range(1, rows).map(item => (\n                <tr key={`-1-${item}`}>\n                  <td\n                    data-col={-1}\n                    data-row={item}\n                    style={{ height: `${cellHeight}px`, width: `${49 + 1}px` }}\n                  >\n                    {item}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n\n        <div\n          className=\"right-wrapper\"\n          style={{\n            width: `calc(100% - ${49 + 1}px)`\n          }}\n        >\n          <div\n            className=\"right-top-wrapper\"\n            ref={dom => {\n              this.rightTopHeader = dom;\n            }}\n            onScroll={this.onTopHeaderScroll}\n          >\n            <table\n              className=\"table-top-header\"\n              onContextMenu={this.onContextMenu}\n              onMouseDown={this.onMouseDown}\n              onMouseOver={this.onMouseOver}\n              onMouseUp={this.onMouseUp}\n            >\n              <thead>\n                <tr>\n                  {range(1, rows).map(item => (\n                    <th\n                      key={item}\n                      data-col={item}\n                      data-row={-1}\n                      style={{\n                        height: `${cellHeight}px`,\n                        minWidth: `${minCellWidth}px`\n                      }}\n                      // className={\n                      //   isColIncluded ? \"sou-selected-cell-indicator\" : \"\"\n                      // }\n                    >\n                      {item > 26 &&\n                        String.fromCharCode(Math.floor((item - 1) / 26) + 64)}\n                      {String.fromCharCode(((item - 1) % 26) + 65)}\n                    </th>\n                  ))}\n                </tr>\n              </thead>\n            </table>\n          </div>\n\n          <div\n            className=\"right-bottom-wrapper\"\n            style={{\n              // width: `calc(100% - ${39 + 1}px)`,\n              width: `100%`,\n              height: `${pageSize * cellHeight}px`\n            }}\n            ref={dom => {\n              this.rightBottomWrapper = dom;\n            }}\n            onScroll={this.onInnerTableScroll}\n          >\n            <div className=\"right-bottom-inner-wrapper\">\n              <table\n                className=\"table-content\"\n                ref={dom => {\n                  this.tableContent = dom;\n                }}\n                onContextMenu={this.onContextMenu}\n                onMouseDown={this.onMouseDown}\n                onMouseOver={this.onMouseOver}\n                onMouseUp={this.onMouseUp}\n              >\n                <tbody\n                  onDoubleClick={() => {\n                    this.showInput();\n                  }}\n                >\n                  {this.renderCells(rows, columns, data)}\n                </tbody>\n              </table>\n\n              {/* {this.renderBorders()} */}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nReactExcel.propTypes = {\n  style: PropTypes.object,\n  minCellWidth: PropTypes.number,\n  cellHeight: PropTypes.number,\n  pageSize: PropTypes.number,\n  data: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.string)),\n  onDataChange: PropTypes.func\n};\n\nReactExcel.defaultProps = {\n  data: [],\n  minCellWidth: 120,\n  pageSize: 20,\n  cellHeight: 28,\n  onDataChange: data => {\n    console.log(data);\n  }\n};\n\nexport default ReactExcel;\n","import React, { Component } from \"react\";\nimport ReactExcel from \"./components/ReactExcel\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <ReactExcel\n          data={\n            [[\"City\", \"Beijing\", \"Shanghai\", \"Guangzhou\"],\n            [\"Temperature\", \"5\", \"22\", \"29\"],\n            [\"Weather\", \"Windy\", \"Sunny\", \"Rainy\"]]\n          }\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}